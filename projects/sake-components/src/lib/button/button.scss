@use '../variable' as var;

@mixin button-color-theme($name) {
    color: var(--#{$name}-color-text);
    background-color: var(--#{$name}-color);
    border: 1px solid var(--#{$name}-color);

    &:hover,
    &:focus {
        background-color: var(--#{$name}-color-hover);
    }

    &:active {
        background-color: var(--#{$name}-color-active);
    }

    &:disabled,
    &.disabled {
        color: var(--#{$name}-color-disabled-text);
        background-color: var(--#{$name}-color-disabled);
        border: 1px solid var(--#{$name}-color-disabled);
    }
}

:host {
    &button {
        border-radius: 0.375rem;
        cursor: pointer;
        padding: 0 0.8333rem;
        height: var(--medium-height);

        &:disabled,
        &.disabled {
            cursor: not-allowed;
        }

        // The `color` input defaults to 'primary', so the .primary class will be
        // applied by default. We use a mixin and a loop to generate the styles for
        // each color variant.
        @each $theme in var.$themes {
            &.#{$theme} {
                @include button-color-theme($theme);
            }
        }
    }

    &input[type='file'] {
        &:disabled,
        &.disabled {
            cursor: not-allowed;
        }

        // Common styles for the file selector button
        &::file-selector-button {
            border-radius: 0.375rem;
            cursor: pointer;
            padding: 0 0.8333rem;
            height: var(--medium-height);
        }

        // The `color` input defaults to 'primary', so the .primary class will be
        // applied by default. We use a mixin and a loop to generate the styles for
        // each color variant.
        @each $theme in var.$themes {
            &.#{$theme}::file-selector-button {
                @include button-color-theme($theme);
            }
        }
    }
}
