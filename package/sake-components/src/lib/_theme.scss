@use "sass:map";
@use "./variable" as var;

/**
 * Sets the CSS custom properties for a specific theme.
 *
 * This mixin retrieves color values from a specified palette and theme (light/dark)
 * and generates a set of CSS variables with a given prefix.
 * @param {string} $prefix - The prefix for the CSS custom properties (e.g., 'primary', 'secondary').
 * @param {string} $palette-name - The name of the color palette to use (e.g., 'indigo', 'pink').
 * @param {string} $theme-name - The theme mode, either 'light' or 'dark'.
 */
@mixin _set-theme-properties($prefix, $palette-name, $theme-name) {
    $palette: map.get(var.$palettes, $palette-name);
    $theme: map.get($palette, $theme-name);
    $default-color: map.get($theme, "default");
    $text-theme: map.get($theme, "text");
    $subtle-hover-opacity: if($theme-name == dark, 0.24, 0.16);
    $subtle-active-opacity: if($theme-name == dark, 0.36, 0.24);

    --#{$prefix}-color: #{$default-color};
    --#{$prefix}-color-hover: #{map.get($theme, "hover")};
    --#{$prefix}-color-active: #{map.get($theme, "active")};
    --#{$prefix}-color-disabled: #{map.get($theme, "disabled")};
    --#{$prefix}-color-subtle-hover: #{rgba(
            $default-color,
            $subtle-hover-opacity
        )};
    --#{$prefix}-color-subtle-active: #{rgba(
            $default-color,
            $subtle-active-opacity
        )};

    --#{$prefix}-color-text: #{map.get($text-theme, "default")};
    --#{$prefix}-color-disabled-text: #{map.get($text-theme, "disabled")};
}

/**
 * Applies a set of theme colors for a specific mode (light or dark).
 *
 * This mixin iterates through a theme map and applies the corresponding
 * color palette properties for the given theme mode.
 *
 * @param {string} $theme-mode - The theme mode to apply ('light' or 'dark').
 * @param {map} $theme-map - A map of theme names to palette names
 *   (e.g., ('primary': 'indigo', 'secondary': 'pink')).
 */
@mixin _apply-theme-colors($theme-mode, $theme-map) {
    @each $theme-name, $palette-name in $theme-map {
        @include _set-theme-properties($theme-name, $palette-name, $theme-mode);
    }
}

/**
 * Generates the complete theme for the application.
 *
 * This is the main entry point for theming. It sets up CSS custom properties
 * for both light and dark themes based on the provided theme map. It supports
 * both OS-level color scheme preference (`prefers-color-scheme`) and manual
 * theme switching via a `data-theme` attribute.
 *
 * It also sets the default text color for the entire document.
 *
 * @param {map} $theme-map - A map of theme names to palette names
 *   (e.g., ('primary': 'indigo', 'secondary': 'pink')).
 */
@mixin sake-theme($theme-map) {
    :root {
        @media (prefers-color-scheme: light) {
            @include _apply-theme-colors(light, $theme-map);
        }

        @media (prefers-color-scheme: dark) {
            @include _apply-theme-colors(dark, $theme-map);
        }

        [data-theme="light"] {
            @include _apply-theme-colors(light, $theme-map);
        }

        [data-theme="dark"] {
            @include _apply-theme-colors(dark, $theme-map);
        }
    }

    html {
        $text-color-light: #1a1a1a;
        $text-color-dark: #e4e4e4;

        @media (prefers-color-scheme: light) {
            color: $text-color-light;
        }

        @media (prefers-color-scheme: dark) {
            color: $text-color-dark;
        }

        [data-theme="light"] {
            color: $text-color-light;
        }

        [data-theme="dark"] {
            color: $text-color-dark;
        }
    }
}
