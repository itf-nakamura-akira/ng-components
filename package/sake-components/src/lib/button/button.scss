@use "../variable" as var;

/**
 * Sets the color theme for a button based on its variant (filled, outlined, text).
 *
 * @param {string} $name - The name of the theme (e.g., 'primary', 'secondary').
 * @param {string} $variant - The button variant ('filled', 'outlined', 'text').
 * @param {string | null} $pseudo-element - The name of the pseudo-element to style, if any (e.g., 'file-selector-button').
 */
@mixin _button-variant-theme($name, $variant, $pseudo-element: null) {
    $target-selector: if($pseudo-element, "&::#{$pseudo-element}", "&");
    $disabled-target-selector: if(
        $pseudo-element,
        "&:disabled::#{$pseudo-element}, &.disabled::#{$pseudo-element}",
        "&:disabled, &.disabled"
    );

    #{$target-selector} {
        @if $variant == "filled" {
            color: var(--#{$name}-color-text);
            background-color: var(--#{$name}-color);
            border: 1px solid var(--#{$name}-color);

            &:hover,
            &:focus {
                background-color: var(--#{$name}-color-hover);
            }

            &:active {
                background-color: var(--#{$name}-color-active);
            }
        } @else {
            // Common styles for 'outlined' and 'text'
            color: var(--#{$name}-color);
            background-color: transparent;
            border: 1px
                solid
                if($variant == "outlined", var(--#{$name}-color), transparent);

            &:hover,
            &:focus {
                background-color: var(--#{$name}-color-subtle-hover);
            }

            &:active {
                background-color: var(--#{$name}-color-subtle-active);
            }
        }
    }

    #{$disabled-target-selector} {
        @if $variant == "filled" {
            color: var(--#{$name}-color-disabled-text);
            background-color: var(--#{$name}-color-disabled);
            border: 1px solid var(--#{$name}-color-disabled);
        } @else {
            // Common styles for 'outlined' and 'text'
            color: var(--#{$name}-color-disabled);
            background-color: transparent;
            border: 1px
                solid
                if(
                    $variant == "outlined",
                    var(--#{$name}-color-disabled),
                    transparent
                );
        }
    }
}

/**
 * Defines common appearance properties for a button, such as border-radius,
 * cursor, height, padding, and font-size. It uses CSS custom properties
 * for height and font-size to allow for easy size customization.
 */
@mixin _button-appearance {
    border-radius: calc(var(--font-size) * 0.375);
    cursor: pointer;
    height: var(--height);
    padding: 0 calc((var(--height) - var(--font-size)) / 2 * 4 / 3);
    font-size: var(--font-size);
}

/**
 * Sets the CSS custom properties for button sizing.
 * It defines 'medium' as the default size and provides overrides
 * for 'small' and 'large' sizes.
 */
@mixin _button-size-variables {
    --font-size: var(--medium-font-size);
    --height: var(--medium-height);

    &.small {
        --font-size: var(--small-font-size);
        --height: var(--small-height);
    }

    &.large {
        --font-size: var(--large-font-size);
        --height: var(--large-height);
    }
}

/**
 * Applies all theme variants (filled, outlined, text) to a button or a button-like pseudo-element.
 * It iterates through the available themes and variants, applying the corresponding styles.
 *
 * @param {string | null} $pseudo-element - The name of the pseudo-element to style, if any.
 */
@mixin _apply-button-themes($pseudo-element: null) {
    $variants: "filled", "outlined", "text";

    @each $theme in var.$themes {
        &.#{$theme} {
            @each $variant in $variants {
                &.#{$variant} {
                    @include _button-variant-theme(
                        $theme,
                        $variant,
                        $pseudo-element
                    );
                }
            }
        }
    }
}

// Styles for `<button>` and `<input type="button">` elements with the `sk-button` attribute.
:host(:is(button, input[type="button"])) {
    @include _button-size-variables;
    @include _button-appearance;

    &.rounded {
        border-radius: 9999px;
    }

    &:disabled,
    &.disabled {
        cursor: not-allowed;
    }

    @include _apply-button-themes();
}

// Styles for `<input type="file">` elements with the `sk-button` attribute.
// These styles target the `::file-selector-button` pseudo-element to style
// the button part of the file input.
:host(input[type="file"]) {
    @include _button-size-variables;

    &.rounded {
        &::file-selector-button {
            border-radius: 9999px;
        }
    }

    &::file-selector-button {
        @include _button-appearance;
    }

    &:disabled,
    &.disabled {
        cursor: not-allowed;

        &::file-selector-button {
            cursor: not-allowed;
        }
    }

    @include _apply-button-themes("file-selector-button");
}
